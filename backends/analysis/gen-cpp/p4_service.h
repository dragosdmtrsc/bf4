/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef p4_service_H
#define p4_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "p4_api_types.h"

namespace p4_thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class p4_serviceIf {
 public:
  virtual ~p4_serviceIf() {}
  virtual void get_graph(method& _return) = 0;
  virtual void methods_by_names(std::set<method_info> & _return, const std::set<std::string> & names) = 0;
  virtual void get_main(id_t& _return) = 0;
  virtual void get_method(method& _return, const id_t& id) = 0;
  virtual void exit() = 0;
};

class p4_serviceIfFactory {
 public:
  typedef p4_serviceIf Handler;

  virtual ~p4_serviceIfFactory() {}

  virtual p4_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(p4_serviceIf* /* handler */) = 0;
};

class p4_serviceIfSingletonFactory : virtual public p4_serviceIfFactory {
 public:
  p4_serviceIfSingletonFactory(const ::std::shared_ptr<p4_serviceIf>& iface) : iface_(iface) {}
  virtual ~p4_serviceIfSingletonFactory() {}

  virtual p4_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(p4_serviceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<p4_serviceIf> iface_;
};

class p4_serviceNull : virtual public p4_serviceIf {
 public:
  virtual ~p4_serviceNull() {}
  void get_graph(method& /* _return */) {
    return;
  }
  void methods_by_names(std::set<method_info> & /* _return */, const std::set<std::string> & /* names */) {
    return;
  }
  void get_main(id_t& /* _return */) {
    return;
  }
  void get_method(method& /* _return */, const id_t& /* id */) {
    return;
  }
  void exit() {
    return;
  }
};


class p4_service_get_graph_args {
 public:

  p4_service_get_graph_args(const p4_service_get_graph_args&);
  p4_service_get_graph_args& operator=(const p4_service_get_graph_args&);
  p4_service_get_graph_args() {
  }

  virtual ~p4_service_get_graph_args() noexcept;

  bool operator == (const p4_service_get_graph_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const p4_service_get_graph_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const p4_service_get_graph_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class p4_service_get_graph_pargs {
 public:


  virtual ~p4_service_get_graph_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _p4_service_get_graph_result__isset {
  _p4_service_get_graph_result__isset() : success(false) {}
  bool success :1;
} _p4_service_get_graph_result__isset;

class p4_service_get_graph_result {
 public:

  p4_service_get_graph_result(const p4_service_get_graph_result&);
  p4_service_get_graph_result& operator=(const p4_service_get_graph_result&);
  p4_service_get_graph_result() {
  }

  virtual ~p4_service_get_graph_result() noexcept;
  method success;

  _p4_service_get_graph_result__isset __isset;

  void __set_success(const method& val);

  bool operator == (const p4_service_get_graph_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const p4_service_get_graph_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const p4_service_get_graph_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _p4_service_get_graph_presult__isset {
  _p4_service_get_graph_presult__isset() : success(false) {}
  bool success :1;
} _p4_service_get_graph_presult__isset;

class p4_service_get_graph_presult {
 public:


  virtual ~p4_service_get_graph_presult() noexcept;
  method* success;

  _p4_service_get_graph_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _p4_service_methods_by_names_args__isset {
  _p4_service_methods_by_names_args__isset() : names(false) {}
  bool names :1;
} _p4_service_methods_by_names_args__isset;

class p4_service_methods_by_names_args {
 public:

  p4_service_methods_by_names_args(const p4_service_methods_by_names_args&);
  p4_service_methods_by_names_args& operator=(const p4_service_methods_by_names_args&);
  p4_service_methods_by_names_args() {
  }

  virtual ~p4_service_methods_by_names_args() noexcept;
  std::set<std::string>  names;

  _p4_service_methods_by_names_args__isset __isset;

  void __set_names(const std::set<std::string> & val);

  bool operator == (const p4_service_methods_by_names_args & rhs) const
  {
    if (!(names == rhs.names))
      return false;
    return true;
  }
  bool operator != (const p4_service_methods_by_names_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const p4_service_methods_by_names_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class p4_service_methods_by_names_pargs {
 public:


  virtual ~p4_service_methods_by_names_pargs() noexcept;
  const std::set<std::string> * names;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _p4_service_methods_by_names_result__isset {
  _p4_service_methods_by_names_result__isset() : success(false) {}
  bool success :1;
} _p4_service_methods_by_names_result__isset;

class p4_service_methods_by_names_result {
 public:

  p4_service_methods_by_names_result(const p4_service_methods_by_names_result&);
  p4_service_methods_by_names_result& operator=(const p4_service_methods_by_names_result&);
  p4_service_methods_by_names_result() {
  }

  virtual ~p4_service_methods_by_names_result() noexcept;
  std::set<method_info>  success;

  _p4_service_methods_by_names_result__isset __isset;

  void __set_success(const std::set<method_info> & val);

  bool operator == (const p4_service_methods_by_names_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const p4_service_methods_by_names_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const p4_service_methods_by_names_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _p4_service_methods_by_names_presult__isset {
  _p4_service_methods_by_names_presult__isset() : success(false) {}
  bool success :1;
} _p4_service_methods_by_names_presult__isset;

class p4_service_methods_by_names_presult {
 public:


  virtual ~p4_service_methods_by_names_presult() noexcept;
  std::set<method_info> * success;

  _p4_service_methods_by_names_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class p4_service_get_main_args {
 public:

  p4_service_get_main_args(const p4_service_get_main_args&);
  p4_service_get_main_args& operator=(const p4_service_get_main_args&);
  p4_service_get_main_args() {
  }

  virtual ~p4_service_get_main_args() noexcept;

  bool operator == (const p4_service_get_main_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const p4_service_get_main_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const p4_service_get_main_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class p4_service_get_main_pargs {
 public:


  virtual ~p4_service_get_main_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _p4_service_get_main_result__isset {
  _p4_service_get_main_result__isset() : success(false) {}
  bool success :1;
} _p4_service_get_main_result__isset;

class p4_service_get_main_result {
 public:

  p4_service_get_main_result(const p4_service_get_main_result&);
  p4_service_get_main_result& operator=(const p4_service_get_main_result&);
  p4_service_get_main_result() : success() {
  }

  virtual ~p4_service_get_main_result() noexcept;
  id_t success;

  _p4_service_get_main_result__isset __isset;

  void __set_success(const id_t& val);

  bool operator == (const p4_service_get_main_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const p4_service_get_main_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const p4_service_get_main_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _p4_service_get_main_presult__isset {
  _p4_service_get_main_presult__isset() : success(false) {}
  bool success :1;
} _p4_service_get_main_presult__isset;

class p4_service_get_main_presult {
 public:


  virtual ~p4_service_get_main_presult() noexcept;
  id_t* success;

  _p4_service_get_main_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _p4_service_get_method_args__isset {
  _p4_service_get_method_args__isset() : id(false) {}
  bool id :1;
} _p4_service_get_method_args__isset;

class p4_service_get_method_args {
 public:

  p4_service_get_method_args(const p4_service_get_method_args&);
  p4_service_get_method_args& operator=(const p4_service_get_method_args&);
  p4_service_get_method_args() : id() {
  }

  virtual ~p4_service_get_method_args() noexcept;
  id_t id;

  _p4_service_get_method_args__isset __isset;

  void __set_id(const id_t& val);

  bool operator == (const p4_service_get_method_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const p4_service_get_method_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const p4_service_get_method_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class p4_service_get_method_pargs {
 public:


  virtual ~p4_service_get_method_pargs() noexcept;
  const id_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _p4_service_get_method_result__isset {
  _p4_service_get_method_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _p4_service_get_method_result__isset;

class p4_service_get_method_result {
 public:

  p4_service_get_method_result(const p4_service_get_method_result&);
  p4_service_get_method_result& operator=(const p4_service_get_method_result&);
  p4_service_get_method_result() {
  }

  virtual ~p4_service_get_method_result() noexcept;
  method success;
  NoSuchMethod ouch;

  _p4_service_get_method_result__isset __isset;

  void __set_success(const method& val);

  void __set_ouch(const NoSuchMethod& val);

  bool operator == (const p4_service_get_method_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const p4_service_get_method_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const p4_service_get_method_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _p4_service_get_method_presult__isset {
  _p4_service_get_method_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _p4_service_get_method_presult__isset;

class p4_service_get_method_presult {
 public:


  virtual ~p4_service_get_method_presult() noexcept;
  method* success;
  NoSuchMethod ouch;

  _p4_service_get_method_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class p4_service_exit_args {
 public:

  p4_service_exit_args(const p4_service_exit_args&);
  p4_service_exit_args& operator=(const p4_service_exit_args&);
  p4_service_exit_args() {
  }

  virtual ~p4_service_exit_args() noexcept;

  bool operator == (const p4_service_exit_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const p4_service_exit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const p4_service_exit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class p4_service_exit_pargs {
 public:


  virtual ~p4_service_exit_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class p4_service_exit_result {
 public:

  p4_service_exit_result(const p4_service_exit_result&);
  p4_service_exit_result& operator=(const p4_service_exit_result&);
  p4_service_exit_result() {
  }

  virtual ~p4_service_exit_result() noexcept;

  bool operator == (const p4_service_exit_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const p4_service_exit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const p4_service_exit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class p4_service_exit_presult {
 public:


  virtual ~p4_service_exit_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class p4_serviceClient : virtual public p4_serviceIf {
 public:
  p4_serviceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  p4_serviceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_graph(method& _return);
  void send_get_graph();
  void recv_get_graph(method& _return);
  void methods_by_names(std::set<method_info> & _return, const std::set<std::string> & names);
  void send_methods_by_names(const std::set<std::string> & names);
  void recv_methods_by_names(std::set<method_info> & _return);
  void get_main(id_t& _return);
  void send_get_main();
  void recv_get_main(id_t& _return);
  void get_method(method& _return, const id_t& id);
  void send_get_method(const id_t& id);
  void recv_get_method(method& _return);
  void exit();
  void send_exit();
  void recv_exit();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class p4_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<p4_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (p4_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_graph(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_methods_by_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_main(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_method(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  p4_serviceProcessor(::std::shared_ptr<p4_serviceIf> iface) :
    iface_(iface) {
    processMap_["get_graph"] = &p4_serviceProcessor::process_get_graph;
    processMap_["methods_by_names"] = &p4_serviceProcessor::process_methods_by_names;
    processMap_["get_main"] = &p4_serviceProcessor::process_get_main;
    processMap_["get_method"] = &p4_serviceProcessor::process_get_method;
    processMap_["exit"] = &p4_serviceProcessor::process_exit;
  }

  virtual ~p4_serviceProcessor() {}
};

class p4_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  p4_serviceProcessorFactory(const ::std::shared_ptr< p4_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< p4_serviceIfFactory > handlerFactory_;
};

class p4_serviceMultiface : virtual public p4_serviceIf {
 public:
  p4_serviceMultiface(std::vector<std::shared_ptr<p4_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~p4_serviceMultiface() {}
 protected:
  std::vector<std::shared_ptr<p4_serviceIf> > ifaces_;
  p4_serviceMultiface() {}
  void add(::std::shared_ptr<p4_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_graph(method& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_graph(_return);
    }
    ifaces_[i]->get_graph(_return);
    return;
  }

  void methods_by_names(std::set<method_info> & _return, const std::set<std::string> & names) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->methods_by_names(_return, names);
    }
    ifaces_[i]->methods_by_names(_return, names);
    return;
  }

  void get_main(id_t& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_main(_return);
    }
    ifaces_[i]->get_main(_return);
    return;
  }

  void get_method(method& _return, const id_t& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_method(_return, id);
    }
    ifaces_[i]->get_method(_return, id);
    return;
  }

  void exit() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exit();
    }
    ifaces_[i]->exit();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class p4_serviceConcurrentClient : virtual public p4_serviceIf {
 public:
  p4_serviceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  p4_serviceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_graph(method& _return);
  int32_t send_get_graph();
  void recv_get_graph(method& _return, const int32_t seqid);
  void methods_by_names(std::set<method_info> & _return, const std::set<std::string> & names);
  int32_t send_methods_by_names(const std::set<std::string> & names);
  void recv_methods_by_names(std::set<method_info> & _return, const int32_t seqid);
  void get_main(id_t& _return);
  int32_t send_get_main();
  void recv_get_main(id_t& _return, const int32_t seqid);
  void get_method(method& _return, const id_t& id);
  int32_t send_get_method(const id_t& id);
  void recv_get_method(method& _return, const int32_t seqid);
  void exit();
  int32_t send_exit();
  void recv_exit(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
