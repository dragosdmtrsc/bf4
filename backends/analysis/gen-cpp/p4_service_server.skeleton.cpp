// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "p4_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::p4_thrift;

class p4_serviceHandler : virtual public p4_serviceIf {
 public:
  p4_serviceHandler() {
    // Your initialization goes here
  }

  void get_graph(method& _return) {
    // Your implementation goes here
    printf("get_graph\n");
  }

  void methods_by_names(std::set<method_info> & _return, const std::set<std::string> & names) {
    // Your implementation goes here
    printf("methods_by_names\n");
  }

  void get_main(id_t& _return) {
    // Your implementation goes here
    printf("get_main\n");
  }

  void get_method(method& _return, const id_t& id) {
    // Your implementation goes here
    printf("get_method\n");
  }

  void exit() {
    // Your implementation goes here
    printf("exit\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<p4_serviceHandler> handler(new p4_serviceHandler());
  ::std::shared_ptr<TProcessor> processor(new p4_serviceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

